@page "/Empleados/Ventas/ventasProveedor"
@using Reciplas.Models;
@inject NotificationService NotificationService 
@inherits OwningComponentBase<Usuario>
@using System.Collections.Generic;  
@inject NavigationManager NavigationManager
@inject DialogService DialogService   


<PageTitle>Areas</PageTitle>
<TituloPrincipal TextoPrincipal="Ventas" TextoSecundario="Proveedores" /> 
<br>
<RadzenButton Class="float-end" Click="@(args => NavigationManager.NavigateTo("/Empleados/Administracion/Consultas"))" Variant="Variant.Flat" Shade="Shade.Dark" Text="Area Administración" Icon="assignment" ButtonStyle="ButtonStyle.Light"/>

<RadzenButton Click=@(args => OnClick("Excel Descargado")) Variant="Variant.Flat" Shade="Shade.Dark"  Text="Excel" Icon="assignment_returned" ButtonStyle="ButtonStyle.Success"/>
<br>
<br>
<CListado TItem="Models.Proveedor" Data="@proveedores" PageSize="5" AllowColumnResize="true" AllowAlternatingRows="false" Frozen="true">
    
       <Columns>      
        <RadzenDataGridColumn TItem=" Models.Proveedor" TextAlign="TextAlign.Center" Property="ID" Title="ID" Width="35px" Frozen="true" />
        <RadzenDataGridColumn TItem=" Models.Proveedor" Property="Nombre" Title="Nombre" Width="80px"/> 
        <RadzenDataGridColumn TItem="Models.Proveedor" Property="DNI" Title="DNI" Width="60px" />
        <RadzenDataGridColumn TItem="Models.Proveedor" Property="Direccion" Title="Direcci&oacute;n" Width="100px" />
        <RadzenDataGridColumn TItem="Models.Proveedor" Property="Ciudad" Title="Ciudad" Width="100px" />
        <RadzenDataGridColumn TItem=" Models.Proveedor" TextAlign="TextAlign.Center"  Title="Pedidos" Width="80px">
            <Template Context="item">
                <RadzenButton Click="@(args => NavigationManager.NavigateTo("/Empleados/Ventas/PedDetalles"))" TextAlign="TextAlign.Center" Icon="list" ButtonStyle="ButtonStyle.Success" Style="margin-left: 5px" />
                <RadzenButton Click="@(args => NavigationManager.NavigateTo("/Empleados/Ventas/AgregarPedidoProveedor"))" TextAlign="TextAlign.Center" Icon="add_circle_outline" Color="Color.Warning" Style="margin-left: 5px" /> 
                <RadzenButton Click=@RegisterEliminado TextAlign="TextAlign.Center" Icon="delete" ButtonStyle="ButtonStyle.Danger"Style="margin-left: 5px"/>

            </Template>
        </RadzenDataGridColumn>  
        <RadzenDataGridColumn TItem=" Models.Proveedor" Title="Ventas" Context="clientes" Filterable="false" Sortable="false" Width="100px">
            <Template Context="data"> 
                <RadzenButton Style="margin-left: 15px" Variant="Variant.Outlined" Click="@(args => NavigationManager.NavigateTo("/Empleados/Ventas/FacturarPedido"))"  Icon="add_shopping_cart"/>
  
                <RadzenCheckBox Style="margin-left: 25px" @bind-Value=@data.PerfilAprobacion TValue="bool" Name=@($"CheckBoxNro{data.Id}")
                    Disabled="false" />
                <RadzenLabel Text="@(data.PerfilAprobacion ? "Finalizo" : "No Finalizo")" Component=@($"CheckBoxNro{data.Id}") /> 
            </Template>
        </RadzenDataGridColumn> 
    </Columns>   
 
              
</CListado>
<br>
<RadzenStack Orientation="Orientation.Horizontal" >
    <RadzenButton Click="@(args => NavigationManager.NavigateTo("/Empleados/Ventas/NuevoProveedorFormulario"))" Variant="Variant.Flat"  Text="Nuevo" Icon="add_circle_outline" ButtonStyle="ButtonStyle.Secondary" />
    <RadzenButton Click="@(args => NavigationManager.NavigateTo("/Empleados/Ventas/ProveedorFormulario"))" Variant="Variant.Flat"  Text="Modificar" Icon="check_circle" ButtonStyle="ButtonStyle.Success"  />
 

        <RadzenButton Style="margin-left:auto" Click="@(args => NavigationManager.NavigateTo("/Empleados/Ventas/ventasClientes"))" Variant="Variant.Outlined" Text="Clientes" Icon="compare_arrows" ButtonStyle="ButtonStyle.Primary"/>

    </RadzenStack>


@code {
       bool EmployeeIDVisible = false; 

    IEnumerable<Models.Proveedor> proveedores;  
    protected bool cargando = true;
    [Parameter] public bool SoloLectura { get; set; } = true;
    [Parameter] public string Nombre {get; set;}
    [Parameter] public string Direccion {get; set;}
    [Parameter] public int ID {get; set;}
     [Parameter] public int Sucursal {get; set;} 
    private void OnClick(string text)
    {
        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Error, Detail = text });
    }
protected async Task QuitarAdjunto(int id)
    {
      //
    }

     private int _count;
    protected override Task OnInitializedAsync()
    {
        List<Models.Proveedor> persons = new List<Models.Proveedor>();
        var person1 = new Models.Proveedor {Nombre = "Chiara Madelein", DNI=98138187, Direccion = "Calle gualaby 42 Sydney", ID =12, Ciudad="Corrientes", PerfilAprobacion=false};
        var person2 = new Models.Proveedor {Nombre = "Nahia Orgoñ", DNI=12345687, Direccion = "French 414", ID =7,  Ciudad="Resistencia - Chaco", PerfilAprobacion=true};
        var person3 = new Models.Proveedor {Nombre = "Valen Sosa", DNI=23682387, Direccion = "Av. Sarmiento", ID =5,  Ciudad="Goya - Ctes", PerfilAprobacion=true};
        var person4 = new Models.Proveedor {Nombre = "Mariano Gonzalez", DNI=98138187, Direccion = "Calle importante", ID =32,  Ciudad="Barranqueras - Chaco", PerfilAprobacion=false};
        var person5 = new Models.Proveedor {Nombre = "Leandro Martinez", DNI=31829887, Direccion = "ni idea", ID =15,  Ciudad="Mburucuya - Ctes", PerfilAprobacion=true};
        var person6 = new Models.Proveedor {Nombre = "Bibiana Altamirano", DNI=12819233, Direccion = "ejemplo 6", ID =13,  Ciudad="Corrientes", PerfilAprobacion=false};
        var person7 = new Models.Proveedor {Nombre = "Mateo Messi", DNI=91358268, Direccion = "otra calle importante", ID =69,  Ciudad="Paso de los Libres - Ctes", PerfilAprobacion=false};

        persons.Add(person1);        
        persons.Add(person2);        
        persons.Add(person3);        
        persons.Add(person4);        
        persons.Add(person5);
        persons.Add(person6);
        persons.Add(person7);

        proveedores = persons;
        _count = persons.Count;

        return base.OnInitializedAsync();
    }
 async Task RegisterEliminado()
    {
        var result = await DialogService.OpenAsync("Está seguro de que desea eliminar el Pedido?", ds =>
        @<div>
            <div class="row">
                <div class="col">
                   <a href="/Empleados/Ventas/ventasProveedor"><RadzenButton Click=@(args => OnClick("Registro Eliminado")) TextAlign="TextAlign.Center" Icon="delete" ButtonStyle="ButtonStyle.Danger" Style="margin-left: 5px" Text="Eliminar" class="me-1"/></a>
                   <RadzenButton Click="() => ds.Close(false)" TextAlign="TextAlign.Center" Icon="delete" ButtonStyle="ButtonStyle.Light" Style="margin-left: 5px" Text="Cancelar"  class="me-1 float-end" />                </div>
            </div>
        </div>);
    } 
}

